## -*- coding: utf-8 -*-
import logging
from loader import bot;
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton;
from loader import dp;
from aiogram.dispatcher.filters import Text
from aiogram import types;
from aiogram.types import ReplyKeyboardRemove;
from db import mycursor, mydb;
import requests;
TOKEN = "5533174693:AAEoKmwRzH9-tLsDVxpvZ5xaZDjaIzfvN_w";

#* SQL requests
SQL_REQUESTS = {
    "SELECT_ALL": "SELECT * FROM patient",
    "SELECT_ID_AND_CHAT_ID": "SELECT ID, CHAT_ID FROM patient",
    "SELECT_CHAT_ID": "SELECT CHAT_ID FROM patient",
    "INSERT_ALL": "INSERT INTO patient (CHAT_ID, GROUP_REC, PUSH_NOTIFICATIONS) VALUES (%s,%s,%s)"
}


#* –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
push_notifications_boolean_answer_yes_btn = KeyboardButton('–î–∞');
push_notifications_boolean_answer_no_btn = KeyboardButton('–ù–µ—Ç');
push_notifications_boolean_answer_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
push_notifications_boolean_answer_kb.row(
    push_notifications_boolean_answer_yes_btn,
    push_notifications_boolean_answer_no_btn
);

dominance_in_the_diet_question_first_btn = KeyboardButton('–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —É–≥–ª–µ–≤–æ–¥—ã');
dominance_in_the_diet_question_second_btn = KeyboardButton('–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –∂–∏—Ä—ã');
dominance_in_the_diet_answer_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
dominance_in_the_diet_answer_kb.add(dominance_in_the_diet_question_first_btn).add(dominance_in_the_diet_question_second_btn);

consent_to_the_processing_of_personal_data_answer_yes_btn = KeyboardButton('–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω');
consent_to_the_processing_of_personal_data_answer_no_btn = KeyboardButton('–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω');
consent_to_the_processing_of_personal_data_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
consent_to_the_processing_of_personal_data_kb.row(
    consent_to_the_processing_of_personal_data_answer_yes_btn,
    consent_to_the_processing_of_personal_data_answer_no_btn
);

unsubscibe_notific_yes_sure_btn = KeyboardButton('–î–∞, —É–≤–µ—Ä–µ–Ω');
unsubscibe_notific_no_sure_btn = KeyboardButton('–û—Ç–º–µ–Ω–∞');
unsubscibe_notific_sure_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
unsubscibe_notific_sure_kb.add(unsubscibe_notific_yes_sure_btn).add(unsubscibe_notific_no_sure_btn);

#* –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–π–¥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (input int, return boolean)
def checkUniqueTelegramId(id):
    mycursor.execute(SQL_REQUESTS["SELECT_CHAT_ID"]);
    ids = mycursor.fetchall();
    for i in range(len(ids)):
        ids[i] = ids[i][0];
    if id in ids: return True;
    else: return False;
#* –ü–æ–ª—É—á–∞–µ—Ç –∞–π–¥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (input int, return int)
def getPrimaryKey(id):
    mycursor.execute(SQL_REQUESTS["SELECT_ID_AND_CHAT_ID"]);
    ids = mycursor.fetchall();
    for i in range(len(ids)):
        if ids[i][1] == id:
            return ids[i][0];


#* –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message_handler(Text(equals='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
async def process_start_command(msg: types.Message):
    logging.info(f"notifications_subscribe: user = {msg.from_user.id}");
    data = {
        "chat_id": msg.from_user.id,
        "photo": "https://sun9-east.userapi.com/sun9-57/s/v1/ig2/rA95IZAE9jQ5HxZHUHZIEMD99Sj57_N-uFvy31K0uDOuhRpLVaOT_92-J8sQMbhQ55OHS71FJ8nMaYBNytSy68h7.jpg?size=1280x1280&quality=96&type=album",
        "caption": "üì¢–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?",
        "reply_markup": push_notifications_boolean_answer_kb
    }
    await bot.send_photo(data["chat_id"], data["photo"], data["caption"], reply_markup=push_notifications_boolean_answer_kb);
    # await msg.answer('üì¢–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', reply_markup=push_notifications_boolean_answer_kb);

@dp.message_handler(Text(equals='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'))
async def unsubcribe_notifications_command(msg: types.Message):
    logging.info(f"notifications_unsubscribe: user = {msg.from_user.id}");
    await msg.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?', reply_markup=unsubscibe_notific_sure_kb);

@dp.message_handler(Text(equals='–ù–µ—Ç'))
async def no_func(msg: types.Message):
    await msg.answer('–•–æ—Ä–æ—à–æ, –≤—ã –≤ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=ReplyKeyboardRemove());
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
    await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);

@dp.message_handler(Text(equals='–î–∞'))
async def yes_func(msg: types.Message):
    await msg.answer('üçΩ–ß—Ç–æ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –≤ –í–∞—à–µ–º —Ä–∞—Ü–∏–æ–Ω–µ?\nüç´–£–≥–ª–µ–≤–æ–¥—ã (–±–µ–ª—ã–π —Ö–ª–µ–±, —Å–∞—Ö–∞—Ä, —Å–ª–∞–¥–∫–∏–µ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏, –º–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥, –º—É—á–Ω–æ–µ)\nüçñ–ñ–∏—Ä—ã (–∂–∞—Ä–µ–Ω–æ–µ, —Å–æ–ª–µ–Ω–∏—è, —Å–¥–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–æ, –∫—Ä–µ–ø–∫–∏–µ –º—è—Å–Ω—ã–µ –∏ —Ä—ã–±–Ω—ã–µ –±—É–ª—å–æ–Ω—ã, –∫–æ–ø—á–µ–Ω–æ—Å—Ç–∏, –∫–æ–ª–±–∞—Å—ã)', reply_markup=dominance_in_the_diet_answer_kb);

@dp.message_handler(Text(equals='–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —É–≥–ª–µ–≤–æ–¥—ã'))
async def group_one_func(msg: types.Message):
    logging.info(f"notifications_group: user = {msg.from_user.id}, answer = {msg.text}");
    global group_rec;
    group_rec = 1;
    await msg.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', reply_markup=consent_to_the_processing_of_personal_data_kb);

@dp.message_handler(Text(equals='–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –∂–∏—Ä—ã'))
async def second_group_func(msg: types.Message):
    logging.info(f"notifications_group: user = {msg.from_user.id}, answer = {msg.text}");
    global group_rec;
    group_rec = 2;
    await msg.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', reply_markup=consent_to_the_processing_of_personal_data_kb);

@dp.message_handler(Text(equals='–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω'))
async def yes_sure_func(msg: types.Message):
    logging.info(f"notifications_subscribe_start: user = {msg.from_user.id}");
    id = msg["from"]["id"];
    if not(checkUniqueTelegramId(id)):
        logging.info(f"notifications_ended: user = {msg.from_user.id}");
        val = (id, group_rec, 1);
        mycursor.execute(SQL_REQUESTS["INSERT_ALL"], val);
        mydb.commit();
        await msg.answer('‚ö°Ô∏è–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.', reply_markup=ReplyKeyboardRemove());
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
        kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);
    else:
        logging.info(f"notifications_ended: user = {msg.from_user.id}");
        mycursor.execute("SELECT ID, CHAT_ID, GROUP_REC, PUSH_NOTIFICATIONS FROM patient");
        ids = mycursor.fetchall();
        if checkUniqueTelegramId(id) and ids[getPrimaryKey(id)-1][3] == 1 and ids[getPrimaryKey(id)-1][2] == group_rec:
            logging.info(f"notifications_ended: user = {msg.from_user.id}");
            text = '‚ö°Ô∏è–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.';
            await msg.answer(text, reply_markup=ReplyKeyboardRemove());
            kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
            kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
            await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);
        elif checkUniqueTelegramId(id) and ids[getPrimaryKey(id)-1][3] == 1 and ids[getPrimaryKey(id)-1][2] != group_rec:
            logging.info(f"notifications_ended: user = {msg.from_user.id}");
            sql_update = "UPDATE patient SET GROUP_REC = %s WHERE ID = %s";
            val = (group_rec, getPrimaryKey(id));
            mycursor.execute(sql_update, val);
            mydb.commit();
            text = '‚ö°Ô∏è–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä –ø–æ –ø–æ–≤–æ–¥—É –¥–∏–µ—Ç—ã. –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.'
            await msg.answer(text, reply_markup=ReplyKeyboardRemove());
            kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
            kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
            await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);
        elif checkUniqueTelegramId(id) and ids[getPrimaryKey(id)-1][3] == 0 and ids[getPrimaryKey(id)-1][2] == group_rec:
            logging.info(f"notifications_ended: user = {msg.from_user.id}");
            sql = "UPDATE patient SET PUSH_NOTIFICATIONS = %s WHERE ID = %s";
            val = (1, getPrimaryKey(id));
            mycursor.execute(sql, val);
            mydb.commit();
            text = '‚ö°Ô∏è–í—ã –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–≤ –≥—Ä—É–ø–ø—É.'
            await msg.answer(text, reply_markup=ReplyKeyboardRemove());
            kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
            kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
            await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);
        elif checkUniqueTelegramId(id) and ids[getPrimaryKey(id)-1][3] == 0 and ids[getPrimaryKey(id)-1][2] != group_rec:
            logging.info(f"notifications_ended: user = {msg.from_user.id}");
            sql = "UPDATE patient SET PUSH_NOTIFICATIONS = %s, GROUP_REC = %s WHERE ID = %s";
            val = (1, group_rec, getPrimaryKey(id));
            mycursor.execute(sql, val);
            mydb.commit();
            text = '‚ö°Ô∏è–í—ã –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.'
            await msg.answer(text, reply_markup=ReplyKeyboardRemove());
            kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
            kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
            await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);

@dp.message_handler(Text(equals='–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω'))
async def not_sure_func(msg: types.Message):
    await msg.answer('–•–æ—Ä–æ—à–æ, –≤—ã –≤ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=ReplyKeyboardRemove());
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
    await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);

@dp.message_handler(Text(equals='–î–∞, —É–≤–µ—Ä–µ–Ω'))
async def not_sure_func(msg: types.Message):
    id = msg["from"]["id"];
    sql_update = "UPDATE patient SET PUSH_NOTIFICATIONS = %s WHERE ID = %s";
    val = (0, getPrimaryKey(id));
    mycursor.execute(sql_update, val);
    mydb.commit();
    text = '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π';
    await msg.answer(text, reply_markup=ReplyKeyboardRemove());
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
    await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);

@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞'))
async def not_sure_func(msg: types.Message):
    await msg.answer('–í—ã —Å–º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.', reply_markup=ReplyKeyboardRemove());
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
    await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);
