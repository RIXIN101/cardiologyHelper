## -*- coding: utf-8 -*-
import logging;
import requests;
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ParseMode;
from loader import dp;
from openpyxl import load_workbook;
from aiogram.dispatcher.filters import Text
from aiogram import types;
from db import mycursor, mydb, SQL_REQUESTS;
#* –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ excel –¥–ª—è —á—Ç–µ–Ω–∏—è
read = load_workbook("Produkty.xlsx", data_only=True);
read_sheet = read.active;
TOKEN = "5533174693:AAEoKmwRzH9-tLsDVxpvZ5xaZDjaIzfvN_w";

RECOMENDATIONS_TEXT = {
    "MORE_CARBONYHYDRATES": " üç∞üç¨–ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–±–µ–≥–∞—Ç—å —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤:‚ùóÔ∏è—Å–∞—Ö–∞—Ä,–±–µ–ª—ã–π —Ö–ª–µ–±, –≤–∞—Ä–µ–Ω—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, —Å–≤–µ–∫–ª–∞, –±–µ–ª—ã–π —Ä–∏—Å, –∫—É–∫—É—Ä—É–∑–Ω—ã–µ —Ö–ª–æ–ø—å—è, –º–∞–Ω–Ω–∞—è –∫–∞—à–∞, –ø—à–µ–Ω–æ, –ª–∞–ø—à–∞ –∏–∑ –º—è–≥–∫–∏—Ö —Å–æ—Ä—Ç–æ–≤ –ø—à–µ–Ω–∏—Ü—ã, —Å–¥–æ–±–Ω–∞—è –≤—ã–ø–µ—á–∫–∞, –º–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥, –¥–∂–µ–º, –±–∞–Ω–∞–Ω—ã, –¥—ã–Ω—è‚ùóÔ∏è\n ‚ù§Ô∏èüç´ –î–ª—è —Ç–µ—Ö, –∫–æ–º—É —Å–ª–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å: –º–µ–¥, –≤–∏–Ω–æ–≥—Ä–∞–¥, —Ñ–∏–Ω–∏–∫–∏, –∫—É—Ä–∞–≥–∞, –∏–∑—é–º –±–µ–∑ –∫–æ—Å—Ç–æ—á–µ–∫, —á–µ—Ä–Ω–æ—Å–ª–∏–≤, –∞—Ä–±—É–∑ üçáüçâ",

    "LESS_CARBONYHYDRATES": " üìâ–ü—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ —Å–ª–µ–¥—É–µ—Ç —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –±–æ–ª—å—à–µ –ø–∏—â–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã \nü•ñüçù—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–± –∏ —Ö–ª–µ–±—Ü—ã, –º–∞–∫–∞—Ä–æ–Ω—ã –∏–∑ —Ç–≤–µ—Ä–¥—ã—Ö —Å–æ—Ä—Ç–æ–≤ –ø—à–µ–Ω–∏—Ü—ã, –æ–≤—Å—è–Ω—É—é –∫—Ä—É–ø—É, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ä–∏—Å, –≥—Ä–µ—á–Ω–µ–≤—É—é –∫—Ä—É–ø—É, —á–µ—á–µ–≤–∏—Ü—É, —Ñ–∞—Å–æ–ª—å, –±–æ–±—ã, –Ω—É—Ç, —Ä–µ–¥—å–∫—É, –º–æ—Ä–∫–æ–≤—å, —à–ø–∏–Ω–∞—Ç, —Å–∞–ª–∞—Ç, –∫–∞–ø—É—Å—Ç—É, –ø–µ—Ç—Ä—É—à–∫—É, —É–∫—Ä–æ–ø, —è–±–ª–æ–∫–∏, –∞–±—Ä–∏–∫–æ—Å—ã, –≥–æ—Ä—å–∫–∏–π —à–æ–∫–æ–ª–∞–¥ü•¨ü•ï\n ‚ùóÔ∏è–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –¥–µ—Ñ–∏—Ü–∏—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª–Ω—è—Ç—å –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —É–≥–ª–µ–≤–æ–¥–∞–º–∏ (–±–µ–ª—ã–π —Ä–∏—Å, –∫—É–∫—É—Ä—É–∑–Ω—ã–µ —Ö–ª–æ–ø—å—è, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –º–∞–Ω–Ω–∞—è –∫–∞—à–∞, –ø—à–µ–Ω–æ, –ª–∞–ø—à–∞ –∏–∑ –º—è–≥–∫–∏—Ö —Å–æ—Ä—Ç–æ–≤ –ø—à–µ–Ω–∏—Ü—ã, —Å–¥–æ–±–Ω–∞—è –≤—ã–ø–µ—á–∫–∞, –º–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥, –º–µ–¥, –∞—Ä–±—É–∑, –∞–Ω–∞–Ω–∞—Å) ü•îüç´üçâ\n ‚ùóÔ∏èü§ì –ü—Ä–∏ —ç—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–ª—è —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –∏ —Ç–æ–ª—å–∫–æ 5-10 % - –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã (—Å–∞—Ö–∞—Ä–∞).",

    "MORE_PROTEINS": " ü•µüí™üèª –ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ –±–µ–ª–∫–∞ –≤ —Ä–∞—Ü–∏–æ–Ω–µ —Å–ª–µ–¥—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å ‚ùå –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –±–æ–≥–∞—Ç—ã—Ö –±–µ–ª–∫–∞–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ üêÆ –∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ üå± –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è. \n üìç–ö –ø–µ—Ä–≤—ã–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è: –∏–∫—Ä–∞, —Ä—ã–±–∞, –º—è—Å–æ, –ø—Ç–∏—Ü–∞, —Å—ã—Ä –∏ —è–π—Ü–∞ ü•©ü•ö\n üìç–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –±–µ–ª–∫–∞–º–∏ –±–æ–≥–∞—Ç—ã: —Ñ–∞—Å–æ–ª—å, –Ω—É—Ç, –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö, –≥—Ä–µ—á–∏—Ö–∞, –ø—à–µ–Ω–∏—Ü–∞, –∫–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è, —Ç–æ—Ñ—É üå∞ü´ò",
    "LESS_PROTEINS": "üòÆ‚Äçüí®üí™üèª–ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –±–µ–ª–∫–∞ –≤ —Ä–∞—Ü–∏–æ–Ω–µ —Å–ª–µ–¥—É–µ—Ç —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –±–æ–ª—å—à–µ –ø–∏—â–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –±–µ–ª–∫–∞ üêÆü•©\n üìç–í —Ä–∞—Ü–∏–æ–Ω –≤–∫–ª—é—á–∞—é—Ç—Å—è —Ç–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–∞–∫: –∏–∫—Ä–∞, —Ä—ã–±–∞, –º—è—Å–æ, –ø—Ç–∏—Ü–∞, —Å—ã—Ä –∏ —è–π—Ü–∞.\n üìç–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤–∫–ª—é—á–∞—é—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã, –±–æ–≥–∞—Ç—ã–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –±–µ–ª–∫–∞–º–∏ üå±, —ç—Ç–æ: —Ñ–∞—Å–æ–ª—å, –Ω—É—Ç, –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö, –≥—Ä–µ—á–∏—Ö–∞, –ø—à–µ–Ω–∏—Ü–∞, –∫–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è, —Ç–æ—Ñ—É üå∞\n ‚ùóÔ∏èü§ì –ü—Ä–∏ —ç—Ç–æ–º –æ–¥–Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—èüå±, –∞ –≤—Ç–æ—Ä–∞—è ‚Äì –∂–∏–≤–æ—Ç–Ω–æ–≥–æüêÆ",

    "MORE_FATS": " üÜòüçï–ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ –∂–∏—Ä–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ —Å–ª–µ–¥—É–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å ‚ùå —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö –∂–∏—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º –º–∞—Å–ª–µ, –º—è—Å–µ, —Å–∞–ª–µ, –∫–æ–∫–æ—Å–æ–≤–æ–º –∏ –ø–∞–ª—å–º–æ–≤–æ–º –º–∞—Å–ª–∞—Ö üçñüßà\n ‚ùóÔ∏è‚ù§Ô∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–¥–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∂–∏—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–º, –∫—É–∫—É—Ä—É–∑–Ω–æ–º, —Ö–ª–æ–ø–∫–æ–≤–æ–º, —Å–æ–µ–≤–æ–º, –ª—å–Ω—è–Ω–æ–º –∏ —Ä–∞–ø—Å–æ–≤–æ–º –º–∞—Å–ª–∞—Ö üåΩ–∂–∏—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–∞—Ö —Ä—ã–±—ã –∏ —Ä—ã–±—å–µ–º –∂–∏—Ä–µ üêü —Ç–∞–∫ –∂–µ –≤ –æ–ª–∏–≤–∫–æ–≤–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–º –º–∞—Å–ª–∞—Ö, –∞–≤–æ–∫–∞–¥–æ, –º–∞—Å–ª–∏–Ω–∞—Ö –∏ –º—è—Å–µ –ø—Ç–∏—Ü—ã ü•ë\n ‚ùóÔ∏è–î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ä–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∂–∞—Ä–∏—Ç—å –ø–∏—â—É –Ω–∞ –º–∞—Å–ª–µ ü•µ –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–æ–≤–æ—Ä–æ–¥—É —Å –∞–Ω—Ç–∏–ø—Ä–∏–≥–∞—Ä–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º ü§ì\n ‚ùóÔ∏è–í –æ–¥–∏–Ω –∏–ª–∏ –¥–≤–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –µ—Å—Ç—å –Ω–µ–∂–∏—Ä–Ω—ã–π –±–µ–ª–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∂–∏—Ä–Ω—É—é —Ä—ã–±—É, –∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ, –Ω–µ–∂–∏—Ä–Ω—ã–π —Ç–≤–æ—Ä–æ–≥ üêü\n ‚ùóÔ∏è–°–Ω–∏–º–∞—Ç—å –∫–æ–∂—É —Å –ø—Ç–∏—Ü—ã –∏ —Å—Ä–µ–∑–∞—Ç—å –≤–∏–¥–∏–º—ã–π –∂–∏—Ä —Å –º—è—Å–∞ –¥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è üî™ \n ‚ùóÔ∏è–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ñ–∞—Å—Ç—Ñ—É–¥–∞, –∫–æ–ª–±–∞—Å –∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤ ‚ùåüçîüçü",

    "LESS_FATS": "üìâ–ü—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –∂–∏—Ä–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, –±–æ–≥–∞—Ç—ã–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–∏–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏ –∂–∏—Ä–∞–º–∏ üß¨ –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤: –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–º, –∫—É–∫—É—Ä—É–∑–Ω–æ–º, —Ö–ª–æ–ø–∫–æ–≤–æ–º, —Å–æ–µ–≤–æ–º, –ª—å–Ω—è–Ω–æ–º –∏ —Ä–∞–ø—Å–æ–≤–æ–º –º–∞—Å–ª–∞—Ö; –∂–∏—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–∞—Ö —Ä—ã–± –∏ —Ä—ã–±—å–µ–º –∂–∏—Ä–µ üê†üåΩ\n ‚ùóÔ∏è–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –º–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ –æ–ª–∏–≤–∫–æ–≤–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–º –º–∞—Å–ª–∞—Ö, –∞–≤–æ–∫–∞–¥–æ, –º–∞—Å–ª–∏–Ω–∞—Ö –∏ –º—è—Å–µ –ø—Ç–∏—Ü—ã.ü•ë\n ‚ùóÔ∏è–í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å –Ω—É–∂–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –∂–∏—Ä–∞–º ‚òπÔ∏è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º –º–∞—Å–ª–µ, –º—è—Å–µ, —Å–∞–ª–µ, –∫–æ–∫–æ—Å–æ–≤–æ–º –∏ –ø–∞–ª—å–º–æ–≤–æ–º –º–∞—Å–ª–∞—Ö üßàüçñ\n ‚ò∫Ô∏è –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 70% —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∂–∏—Ä–æ–≤ üå± –∫ 30% –∂–∏–≤–æ—Ç–Ω—ã—Ö –∂–∏—Ä–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ üêÆ",

    "LESS_DIETARY_FIBER": "‚òπÔ∏èü•ïüçé –ü—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –ø–∏—â–µ–≤—ã—Ö –≤–æ–ª–æ–∫–æ–Ω —Å–ª–µ–¥—É–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å üìà –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–µ—É—Å–≤–æ—è–µ–º—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ–≥–∞—Ç—ã: ü•ñ—Ö–ª–µ–± –≥—Ä—É–±–æ–≥–æ –ø–æ–º–æ–ª–∞, –Ω–µ–¥—Ä–æ–±–ª–µ–Ω—ã–µ –∫—Ä—É–ø—ã, –æ—Ç—Ä—É–±–∏, —Å–≤–µ–∂–∏–µ –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã, —Ñ–∞—Å–æ–ª—å, –≥–æ—Ä–æ—Ö, –æ—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã üçÖü•ïü•¶üçí",

}


product_classification = [
    "–ú–æ–ª–æ–∫–æ –∏ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–Ø–π—Ü–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
    "–ú—è—Å–æ –∏ –º—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ",
    "–†—ã–±–∞. –ù–µ—Ä—ã–±–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–º—ã—Å–ª–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –Ω–∏—Ö",
    "–ñ–∏—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∂–∏—Ä–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 50%)",
    "–ó–µ—Ä–Ω–æ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ–≥–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏",
    "–ë–æ–±–æ–≤—ã–µ, –æ—Ä–µ—Ö–∏",
    "–û–≤–æ—â–∏, –≥—Ä–∏–±—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏—Ö –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏",
    "–§—Ä—É–∫—Ç—ã, —è–≥–æ–¥—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏—Ö –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏",
    "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "–ù–∞–ø–∏—Ç–∫–∏",
    "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —É–ª—É—á—à–∏—Ç–µ–ª–∏ –≤–∫—É—Å–∞"
];

def createClassificationMenu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add('–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞')
    for i in range(len(product_classification)): btn = KeyboardButton(product_classification[i]); kb.add(btn);
    return kb;

def createProductArr():
    product_arr = [];
    product = read_sheet["A3:A1091"];
    for i in range(len(product)):
        product_arr.append(product[i][0].value);
    for i in range(len(product_classification)):
        product_arr.remove(product_classification[i]);
    return product_arr;

amount_product = read_sheet["A3:A1091"]
amount_arr = []
for i in range(len(amount_product)):
    a = amount_product[i][0].value.strip()
    for j in range(1, 11):
        amount_arr.append(f'{j}, {a}')

@dp.message_handler(Text(equals='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è'))
async def test(msg: types.Message):
    logging.info(f'diet_diary_start: user = {msg.from_user.id}');
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:', reply_markup=createClassificationMenu());

@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞'))
async def cancellation(msg: types.Message):
    id = msg["from"]["id"];
    logging.info(f'diet_diary_cancellation: user = {msg.from_user.id}');
    await msg.answer('–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è...', reply_markup=ReplyKeyboardRemove());
    mycursor.execute(f'delete from diet_diary where tg_id = {id}');
    mydb.commit();
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
    await msg.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=kb);

@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏'))
async def return_to_choice_product(msg: types.Message):
    await msg.answer('–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', reply_markup=createClassificationMenu());

def getAllFromDietDiary(id):
    mycursor.execute(f'select * from diet_diary where tg_id = {id}');
    rel = mycursor.fetchall()[0];
    products = rel[1].split(',');
    if products[-1] == '': products.pop(-1);
    amount = rel[2].split(',');
    if amount[-1] == '': amount.pop(-1);
    string = ''
    for i in range(len(products)):
        string += f'   {amount[i]} –ø–æ—Ä—Ü–∏–∏/–π {products[i]}\n';
    text = '–í–æ—Ç —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:\n'+string+"\n–•–æ—Ç–∏—Ç–µ –µ—â—ë –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Ä–∞—Å—á–∏—Ç–∞—Ç—å –í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è?"
    return text;

@dp.message_handler(Text(equals=amount_arr))
async def product_handler(msg: types.Message):
    id = msg["from"]["id"];
    text = msg["text"].split(',')
    am = text[0]; text.remove(am);
    name = ''.join(text).strip();
    mycursor.execute(f'select products from diet_diary where tg_id = {id}'); products = mycursor.fetchone()[0];
    mycursor.execute(f'select amount from diet_diary where tg_id = {id}'); amount = mycursor.fetchone()[0];
    mycursor.execute(f'select exceptions from diet_diary where tg_id = {id}'); cur_exceptions = mycursor.fetchone()[0];
    mycursor.execute(f'select counter from diet_diary where tg_id = {id}'); counter = mycursor.fetchone()[0];
    mycursor.execute(SQL_REQUESTS["SWITCH_OFF_SAFE_UPDATES"]);
    mycursor.execute(SQL_REQUESTS["UPDATE_OTHER"], ( amount+am+',' , products+name+',' ,cur_exceptions+name+',' ,counter+1 , msg["from"]["id"]));
    mydb.commit();

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'));
    kb.add(KeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫'));

    await msg.answer(getAllFromDietDiary(id), reply_markup=kb)

@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'))
async def plus_one(msg: types.Message):
    logging.info(f'diet_diary_add: user = {msg.from_user.id}');
    id = msg["from"]["id"];
    mycursor.execute(f'select counter from diet_diary where tg_id = {id}'); counter = mycursor.fetchone()[0];
    if counter >= 10:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
        kb.add(KeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫'));
        await msg.answer(f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n{getAllFromDietDiary(id)}', reply_markup=kb);
    else: await msg.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', reply_markup=createClassificationMenu());

def createSheetArr():
    product_arr = [];
    product = read_sheet["A3:A1091"];
    for i in range(len(product)):
        product_arr.append(product[i][0].value.strip());
    return product_arr;

def getInfoFromProducts(names, id):
    products_and_classification_arr = createSheetArr();
    names_arr = names.split(',');
    if names_arr[-1] == '': names_arr.pop(-1);
    arr = [];
    mycursor.execute(f'select amount from diet_diary where tg_id={id}');
    amount = mycursor.fetchone()[0].split(',');
    if amount[-1] == '': amount.pop(-1);
    for i in range(len(names_arr)):
        product_index = products_and_classification_arr.index(names_arr[i])+3;
        middle_weight = read_sheet[f'B{product_index}'].value;
        calories = read_sheet[f'C{product_index}'].value;
        carbohydrates = read_sheet[f'D{product_index}'].value;
        proteins = read_sheet[f'E{product_index}'].value;
        fats = read_sheet[f'F{product_index}'].value;
        dietary_fiber = read_sheet[f'G{product_index}'].value;
        arr.append((int(amount[i]), middle_weight, calories, carbohydrates, proteins, fats, dietary_fiber));
    return arr;

def send_message_for_recomendations(text, id):
    data = {
        "chat_id": id,
        "text": text
    };
    body = requests.post(f'https://api.telegram.org/bot{TOKEN}/sendMessage', data).json();
    return body;


def getRecomendations(carbohydrates, proteins, fats, dietary_fiber):
    text = {
        "carbo": "",
        "prote": "",
        "fats": "",
        "diet_fib": ""
    };

    if carbohydrates > 200: text["carbo"] = RECOMENDATIONS_TEXT["MORE_CARBONYHYDRATES"];
    elif carbohydrates < 200: text["carbo"] = RECOMENDATIONS_TEXT["LESS_CARBONYHYDRATES"];

    if proteins > 50: text["prote"] = RECOMENDATIONS_TEXT["MORE_PROTEINS"];
    elif proteins < 50: text["prote"] = RECOMENDATIONS_TEXT["LESS_PROTEINS"];

    if fats > 50: text["fats"] = RECOMENDATIONS_TEXT["MORE_FATS"];
    elif fats < 50: text["fats"] = RECOMENDATIONS_TEXT["LESS_FATS"];

    if dietary_fiber < 30: text["diet_fib"] = RECOMENDATIONS_TEXT["LESS_DIETARY_FIBER"];

    return text;

def dietDiaryCalculation(info):
    diet = {
        "calories": 0,
        "carbohydrates": 0,
        "proteins": 0,
        "fats": 0,
        "dietary_fiber": 0,
        "weight": 0
    }
    #* –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π* –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ * –∑–Ω–∞—á–µ–Ω–∏–µ / 100
    for i in range(len(info)):
        diet['calories'] += (info[i][0] * info[i][1] * info[i][2]) // 100;
        diet['carbohydrates'] += (info[i][0] * info[i][1] * info[i][3]) // 100;
        diet['proteins'] += (info[i][0] * info[i][1] * info[i][4]) // 100;
        diet['fats'] += (info[i][0] * info[i][1] * info[i][5]) // 100;
        diet['dietary_fiber'] += (info[i][0] * info[i][1] * info[i][6]) // 100;
        diet['weight'] += info[i][0] * info[i][1]
    return diet;

@dp.message_handler(Text(equals='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫'))
async def diet_diary_handler(msg: types.Message):
    logging.info(f'diet_diary_ended: user = {msg.from_user.id}');
    id = msg["from"]["id"];
    mycursor.execute(f'select * from diet_diary where tg_id = {id}');
    result = mycursor.fetchone();
    info = getInfoFromProducts(result[1], id);
    diet = dietDiaryCalculation(info);
    calculated_diet_diary = f"‚ö†Ô∏è–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ä–µ–¥–Ω–µ–Ω—ã. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç–æ—á–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏ –Ω–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –¢–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–∞—Å—Ç –ª–µ—á–∞—â–∏–π –≤—Ä–∞—á!\n\n–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è:\n     –ö–∫–∞–ª: {round(diet['calories'], 2)}\n     –£–≥–ª–µ–≤–æ–¥—ã: {round(diet['carbohydrates'], 2)}\n     –ë–µ–ª–∫–∏: {round(diet['proteins'], 2)}\n     –ñ–∏—Ä—ã: {round(diet['fats'], 2)}\n     –ü–∏—â–µ–≤—ã–µ –≤–æ–ª–æ–∫–Ω–∞: {round(diet['dietary_fiber'], 2)}";
    additional_recommendations = getRecomendations(diet['carbohydrates'], diet['proteins'], diet['fats'], diet['dietary_fiber']);
    await msg.answer(calculated_diet_diary, reply_markup=ReplyKeyboardRemove());
    await msg.answer(additional_recommendations["carbo"], reply_markup=ReplyKeyboardRemove());
    await msg.answer(additional_recommendations["prote"], reply_markup=ReplyKeyboardRemove());
    await msg.answer(additional_recommendations["fats"], reply_markup=ReplyKeyboardRemove());
    if additional_recommendations["diet_fib"] != '':
        await msg.answer(additional_recommendations["diet_fib"], reply_markup=ReplyKeyboardRemove());

    mycursor.execute(f'delete from diet_diary where tg_id = {id}');
    mydb.commit();
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    await msg.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=kb);