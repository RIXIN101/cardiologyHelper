## -*- coding: utf-8 -*-
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton;
import gspread
from loader import dp;
import logging;
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types;
from loader import bot;

#* Google Sheet
gc = gspread.service_account(filename='credentials.json')
gsheet = gc.open_by_key("1HAwz_xpkr2PckconEV2AZq_5ZMzrmqlI0HCVn0S0rBg")
wsheet = gsheet.worksheet("–õ–∏—Å—Ç1")

#* –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—Å–∞—Ü–∏—è –Ω–∞ –≤—Ä–∞—á–∞
def cols(): return len(wsheet.col_values(1));
class Form(StatesGroup):
    name = State();
    phone = State();
    question = State();

@dp.message_handler(Text(equals='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É'))
async def cmd_start(msg: types.Message):
    logging.info(f'forwarding_start: user = {msg.from_user.id}');
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add('–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é');
    kb.add('–ù–µ—Ç, –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å')
    await msg.answer('–ó–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', reply_markup=kb)

@dp.message_handler(Text(equals='–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'))
async def yes_sure(msg: types.Message):
    logging.info(f'forwarding_personal_data: user = {msg.from_user.id}, answer = {msg.text}');
    await Form.name.set();
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—Ä–∞—á—É"));
    data = {
        "chat_id": msg.from_user.id,
        "photo": "https://sun9-east.userapi.com/sun9-18/s/v1/ig2/CM92nke8WF3VOY89wXwKZI36Kyh0lEqjsPt2AvVcwI7RD7kkSVpu5OF2j77wyfpEXykimUK7Qv8iXRHIBGZVON7u.jpg?size=1280x1280&quality=96&type=album",
        "caption": "üë©‚Äç‚öïüë®‚Äç‚öï–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∑–∞ –ø–æ–º–æ—â—å—é, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        "reply_markup": kb
    }
    await bot.send_photo(data["chat_id"], data["photo"], data["caption"], reply_markup=kb);
    # await msg.answer("üë©‚Äç‚öïüë®‚Äç‚öï–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∑–∞ –ø–æ–º–æ—â—å—é, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=kb);

@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—Ä–∞—á—É', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None: return;
    logging.info(f'forwarding_cancellation: user = {message.from_user.id}, answer = {message.text}');
    await state.finish()
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"));
    await message.answer('–ü–µ—Ä–µ–∞–¥—Ä–µ—Å—Å–∞—Ü–∏—è –Ω–∞ –≤—Ä–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=kb)

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    logging.info(f'forwarding_name: user = {message.from_user.id}, answer = {message.text}');
    async with state.proxy() as data: data['name'] = message.text;
    await Form.next()
    await message.answer("üìû–ü—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:")

@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    logging.info(f'forwarding_phone: user = {message.from_user.id}, answer = {message.text}');
    await Form.next();
    await state.update_data(phone=message.text);
    await message.answer("‚ùì–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:")

@dp.message_handler(state=Form.question)
async def process_gender(message: types.Message, state: FSMContext):
    logging.info(f'forwarding_question: user = {message.from_user.id}, answer = {message.text}');
    async with state.proxy() as data: data['question'] = message.text
    patient_data = [data["name"],data["phone"],data["question"]];
    wsheet.insert_row(patient_data, cols()+1);
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"));
    await message.answer('‚ù§Ô∏è–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è.', reply_markup=kb);
    await state.finish();

@dp.message_handler(Text(equals='–ù–µ—Ç, –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å'))
async def no_not_sure(msg: types.Message):
    logging.info(f'forwarding_personal_data: user = {msg.from_user.id}, answer = {msg.text}');
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True);
    kb.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é');
    await msg.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É!', reply_markup=kb);